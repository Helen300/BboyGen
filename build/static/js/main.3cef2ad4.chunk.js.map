{"version":3,"sources":["components/Move.js","components/Form.js","containers/MoveListView.js","containers/MoveDetailView.js","store/actions/auth.js","store/actions/actionTypes.js","containers/Login.js","containers/Signup.js","routes.js","containers/Layout.js","App.js","serviceWorker.js","store/utility.js","store/reducers/auth.js","index.js"],"names":["Moves","itemLayout","dataSource","this","props","data","renderItem","item","Item","Meta","title","href","id","name","description","React","Component","CustomForm","onFinish","values","requestType","moveID","action","moves","console","log","move","axios","post","then","res","catch","error","err","put","rules","required","label","placeholder","type","htmlType","btnText","MoveList","state","newMoves","get","setState","Move","handler","bind","MoveDetail","handleDelete","event","match","params","delete","history","push","onSubmit","authSuccess","token","authFail","logout","localStorage","removeItem","checkAuthTimeout","expirationTime","dispatch","setTimeout","Login","onAuth","username","password","onFinishFailed","errorInfo","errorMessage","message","loading","Password","style","marginLeft","to","connect","key","expirationDate","Date","getTime","setItem","actions","Signup","email","confirm","scrollToFirstError","QuestionCircleOutlined","whitespace","hasFeedback","dependencies","getFieldValue","validator","rule","value","Promise","reject","resolve","password1","password2","BaseRouter","exact","path","component","Header","Layout","Content","Footer","CustomLayout","className","width","height","background","margin","float","theme","mode","defaultSelectedKeys","isAuthenticated","onClick","padding","minHeight","children","textAlign","withRouter","App","onTryAutoSignup","getItem","undefined","Boolean","window","location","hostname","updateObject","oldObject","updatedProperties","initialState","authStart","authLogout","reducer","composeEnhances","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3cef2ad4.chunk.js","sourcesContent":["import React from 'react';\nimport { List } from 'antd';\n\n// be wary of ` verus '\nclass Moves extends React.Component {\n\n  render() {\n    return (\n    <List\n      itemLayout=\"horizontal\"\n      dataSource={this.props.data}\n      renderItem={item => (\n        <List.Item>\n          <List.Item.Meta\n            // goes to slash that link \n            title={<a href={`/${item.id}`}>{item.name}</a>}\n            description={item.id}\n          />\n        </List.Item>\n      )}\n    />\n    );\n  }\n}\n\nexport default Moves;","import React from 'react';\nimport axios from 'axios';\nimport { Form, Input, Button} from 'antd';\n\n\nclass CustomForm extends React.Component {\n\n\n  onFinish = (values, requestType, moveID, action, moves) => {\n    // so it doesn't submit and reload \n    console.log(values);\n    const move = values['move'];\n    const type = values['type'];\n  \n    //  console.log('Move: ', move, 'Type: ', type);\n    switch ( requestType ) {\n      case 'post':\n        return axios.post('http://127.0.0.1:8000/api/', {\n            name: move, \n        })\n        .then(\n          res => console.log(res), \n          action()\n          )\n        .catch(error => console.err(error));\n      case 'put':\n        return axios.put(`http://127.0.0.1:8000/api/${moveID}/`, {\n            name: move, \n        })\n        .then(res => console.log(res))\n        .catch(error => console.err(error));\n\n\n    }\n  };\n\n  render () {\n    return (\n      <div>\n      {/* when form is done and gets submitted, onFinish gets called, \n        passing in the values from the form */}\n        <Form onFinish={(values) => this.onFinish(values, this.props.requestType, this.props.moveID, this.props.action, this.props.moves)}>\n      {/* give form item a name */}\n          <Form.Item name=\"move\" rules={[{ required: true }]} label=\"Name of Move\">\n            <Input placeholder=\"Name your move\" />\n          </Form.Item>\n          <Form.Item name=\"type\" label=\"Type of Move\">\n            <Input placeholder=\"Choose your type of move\" />\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">{this.props.btnText}</Button>\n          </Form.Item>\n        </Form>\n      </div>\n      );\n  }\n}\n\nexport default CustomForm;","import React from 'react';\nimport axios from 'axios';\n\nimport Moves from '../components/Move';\nimport CustomForm from '../components/Form';\n\n\nclass MoveList extends React.Component {\n\tstate = {\n\t\tmoves: [],\n\t}\n\n\n\thandler(newMoves) {\n\t\tconsole.log('updating page with new moves');\n\t\taxios.get('http://localhost:8000/api/')\n\t\t\t.then(res => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tmoves: res.data, \n\t\t\t\t});\n\t\t\t\tconsole.log('printing data', res.data);\n\t\t\t}) \n\t}\n\t// called every time component is remounted \n\tcomponentDidMount() {\n\t\taxios.get('http://localhost:8000/api/')\n\t\t\t.then(res => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tmoves: res.data, \n\t\t\t\t});\n\t\t\t\tconsole.log('printing data', res.data);\n\t\t\t}) \n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Moves data={this.state.moves}/>\n\t\t\t\t<br />\n\t\t\t\t<h2>Create a Move</h2>\n\t\t\t\t<CustomForm \n\t\t\t\t\trequestType=\"post\"\n\t\t\t\t\tmoveID={null}\n\t\t\t\t\tbtnText=\"Create\" moves={this.state.moves} action={this.handler.bind(this)}/>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nexport default MoveList","import React from 'react';\nimport axios from 'axios';\nimport { Card, Button } from 'antd';\n\n\n\nclass MoveDetail extends React.Component {\n\n\tstate = {\n\t\tmove: {},\n\n\t}\n\n\thandleDelete = (event) => {\n\t\tconst moveID = this.props.match.params.moveID;\n\t\tconsole.log('deleting move with ID: ', moveID);\n\t\taxios.delete(`http://127.0.0.1:8000/api/${moveID}/`)\n\t\tthis.props.history.push('/');\n\t\t// THIS DOESN'T ACTUALLY REFRESH THE PAGE \n\t}\n\n\t// called every time component is remounted \n\tcomponentDidMount() {\n\t\tconst moveID = this.props.match.params.moveID;\n\t\tconsole.log('moveID', moveID)\n\t\taxios.get(`http://127.0.0.1:8000/api/${moveID}/`)\n\t\t\t.then(res => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tmove: res.data,\n\t\t\t\t\tmoveID: moveID\n\t\t\t\t});\n\t\t\t}) \n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t// since we need to return one div\n\t\t\t<div>\n\t\t\t<Card title={this.state.move.name}>\n\t\t\t\t<p>{this.state.move.id}</p>\n\t\t\t</Card>\n\t\t\t{/* not sure why we must use lower case form */}\n\t\t\t<form onSubmit={this.handleDelete}>\n\t\t\t\t<Button type=\"danger\" htmlType=\"submit\">Delete</Button>\n\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nexport default MoveDetail","// define methods that take place on receiving actions\n// these are events and when they happen, they signal for when\n// you can do something else ... \nimport * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nexport const authStart = () => {\n\treturn {\n\t\t// must always contain a return type \n\t\t// message received when we execute authStart\n\t\ttype: actionTypes.AUTH_START\n\t}\n}\n\n// takes in a token\nexport const authSuccess= token => {\n\treturn {\n\t\n\t\ttype: actionTypes.AUTH_SUCCESS,\n\t\ttoken: token\n\t}\n}\n\n\nexport const authFail = error => {\n\treturn {\n\n\t\ttype: actionTypes.AUTH_FAIL,\n\t\terror: error\n\t}\n}\n\n// removes credentials from local storage to log user out\nexport const logout = () => {\n\t// just need to remove user credentials from browser \n\tlocalStorage.removeItem('token');\n\tlocalStorage.removeItem('expirationDate');\n\treturn {\n\t\ttype: actionTypes.AUTH_LOGOUT\n\t};\n}\n\n// setting timer for our logout to take place, defined as 1 hr\nexport const checkAuthTimeout = expirationTime => {\n\treturn dispatch => {\n\t\t// something that gets called when given time is over\n\t\t// logs out once expiration \n\t\tsetTimeout(() => {\n\t\t\tdispatch(logout());\n\t\t}, expirationTime * 1000) // secs --> milliseconds\n\t}\n}\n\n// what you need to login = username, password \n// takes in username, password, then posts to backend \nexport const authLogin = (username, password) => {\n\treturn dispatch => {\n\t\t// an alert that we can look at \n\t\tdispatch(authStart());\n\t\t// log the user in at this URL\n\t\taxios.post('http://127.0.0.1:8000/rest-auth/login/', {\n\t\t\t// the data that gets posted \n\t\t\tusername: username, \n\t\t\tpassword: password\n\t\t})\n\t\t// to handle response\n\t\t.then(res => {\n\t\t\t// we get a key back \n\t\t\tconst token = res.data.key;\n\t\t\tconst expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\t\t\t// these are packages in the browser already \n\t\t\t// can't just store it in the application, must store it in something that persists\n\t\t\tlocalStorage.setItem('token', token);\n\t\t\tlocalStorage.setItem('expirationDate', expirationDate);\n\t\t\t// successful login\n\t\t\tdispatch(authSuccess(token));\n\t\t\tdispatch(checkAuthTimeout(3600))\n\n\t\t})\n\t\t// if incorrect credentials, catch error \n\t\t.catch(err => {\n\t\t\tdispatch(authFail(err))\n\t\t})\n\t}\n}\n\n// parameters required by restframework, can be changed \n// pretty similar to login\nexport const authSignup = (username, email, password1, password2) => {\n\treturn dispatch => {\n\t\t// an alert that we can look at \n\t\tdispatch(authStart());\n\t\t// post to this URL \n\t\taxios.post('http://127.0.0.1:8000/rest-auth/registration/', {\n\t\t\t// the data that gets posted \n\t\t\tusername: username, \n\t\t\temail: email, \n\t\t\tpassword1: password1, \n\t\t\tpassword2: password2\n\t\t})\n\t\t// to handle response\n\t\t.then(res => {\n\t\t\t// we get a key back \n\t\t\tconst token = res.data.key;\n\t\t\tconst expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\t\t\t// these are packages in the browser already \n\t\t\t// can't just store it in the application, must store it in something that persists\n\t\t\tlocalStorage.setItem('token', token);\n\t\t\tlocalStorage.setItem('expirationDate', expirationDate);\n\t\t\t// successful login\n\t\t\tdispatch(authSuccess(token));\n\t\t\tdispatch(checkAuthTimeout(3600))\n\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(authFail(err))\n\t\t})\n\t}\n}\n\nexport const authCheckState = () => {\n\treturn dispatch => {\n\t\t// getting object, check if token is stored in local storage \n\t\tconst token = localStorage.getItem('token');\n\t\t// no such token \n\t\tif (token == undefined) {\n\t\t\tdispatch(logout());\n\t\t}\n\t\telse {\n\t\t\t// get current expiration date \n\t\t\tconst expirationDate = new Date(localStorage.getItem('expirationDate'));\n\t\t\t// check if current expiration date is past now date \n\t\t\tif ( expirationDate <= new Date()) {\n\t\t\t\t// already happened, therefore logout \n\t\t\t\tdispatch(logout());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdispatch(authSuccess(token));\n\t\t\t\tdispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n\t\t\t}\n\t\t}\n\t}\n}","// actions that can happen related to authentication\nexport const AUTH_START = 'AUTH_START';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const AUTH_FAIL = 'AUTH_FAIL';\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\n","import React from 'react';\nimport { Form, Input, Button, Spin } from 'antd';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport * as actions from '../store/actions/auth';\n\n\nclass Login extends React.Component {\n  // don't need to call validate because onFinish only calls after validated\n  onFinish = (values) => {\n    console.log('Trying to login with:', values);\n    this.props.onAuth(values.username, values.password)\n    this.props.history.push('/');\n   \n  };\n\n  onFinishFailed = (errorInfo) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  render () { \n  \tlet errorMessage = null; \n  \tif (this.props.error) {\n  \t\terrorMessage = (\n  \t\t\t<p>{this.props.error.message}</p>\n  \t\t);\n  \t}\n\t  return (\n\t  \t<div>\n\t  \t\t{ errorMessage }\n\t\t  \t{\n\t\t  \t\tthis.props.loading ? \n\n\t\t  \t\t<Spin />\n\n\t\t  \t\t:\n\n\t\t\t    <Form\n\t\t\t\n\t\t\t      onFinish={this.onFinish}\n\t\t\t      onFinishFailed={this.onFinishFailed}\n\t\t\t    >\n\t\t\t      <Form.Item\n\t\t\t        label=\"Username\"\n\t\t\t        name=\"username\"\n\t\t\t        rules={[{ required: true, message: 'Please input your username!' }]}\n\t\t\t      >\n\t\t\t        <Input />\n\t\t\t      </Form.Item>\n\n\t\t\t      <Form.Item\n\t\t\t        label=\"Password\"\n\t\t\t        name=\"password\"\n\t\t\t        rules={[{ required: true, message: 'Please input your password!' }]}\n\t\t\t      >\n\t\t\t        <Input.Password />\n\t\t\t      </Form.Item>\n\n\t\t\t      <Form.Item>\n\t\t\t        <Button type=\"primary\" htmlType=\"submit\">\n\t\t\t          Login \n\t\t\t        </Button>\n\t\t\t        <span style={{ marginLeft: '0.5em'}}> \n\t\t\t         OR \n\t\t\t        </span>\n\t\t\t        <NavLink style={{ marginLeft: '0.5em'}} to='/signup/'>\n\t\t\t        Sign Up\n\t\t\t        </NavLink>\n\t\t\t      </Form.Item>\n\t\t\t    </Form>\n\t\t\t}\n\t    </div>\n\t  );\n\t};\n}\n\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tloading: state.loading, \n\t\terror: state.error\n\t}\n}\n\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonAuth: (username, password) => dispatch(actions.authLogin(username, password))\n \t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, Input, Tooltip, Button } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport * as actions from '../store/actions/auth';\n\n\nclass Signup extends React.Component {\n  // [form] = Form.useForm();\n\n  onFinish = values => {\n    console.log('Received values of form: ', values);\n    this.props.onAuth(values.username, values.email, values.password, values.confirm)\n    this.props.history.push('/');\n  };\n\n  render () { \n  return (\n    <Form\n      // form={this.form}\n      name=\"register\"\n      onFinish={this.onFinish}\n      scrollToFirstError\n    >\n\n    <Form.Item\n        name=\"username\"\n        label={\n          <span>\n            Username&nbsp;\n            <Tooltip title=\"Choose a username.\">\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        }\n        rules={[{ required: true, message: 'Please input a username!', whitespace: true }]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"email\"\n        label=\"E-mail\"\n        rules={[\n          {\n            type: 'email',\n            message: 'The input is not valid E-mail!',\n          },\n          {\n            required: true,\n            message: 'Please input your E-mail!',\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"password\"\n        label=\"Password\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your password!',\n          },\n        ]}\n        hasFeedback\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"confirm\"\n        label=\"Confirm Password\"\n        dependencies={['password']}\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: 'Please confirm your password!',\n          },\n          ({ getFieldValue }) => ({\n            validator(rule, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n              return Promise.reject('The two passwords that you entered do not match!');\n            },\n          }),\n        ]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n    \n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Signup\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.loading, \n    error: state.error\n  }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (username, email, password1, password2) => dispatch(actions.authSignup(username, email, password1, password2))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signup);\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport MoveList from './containers/MoveListView';\nimport MoveDetail from './containers/MoveDetailView';\nimport Login from './containers/Login';\nimport Signup from './containers/Signup';\n\nconst BaseRouter = () => (\n\t<div>\n\t\t{/* for the path localhost/ displays MoveList */}\n\t\t<Route exact path='/' component={MoveList} />\n\t\t{/* : defines a parameter */}\n\t\t<Route exact path='/moves/:moveID/' component={MoveDetail} />\n\t\t<Route exact path='/login/' component={Login} />\n\t\t<Route exact path='/signup/' component={Signup} />\n\t</div>\n\n\t);\n\nexport default BaseRouter;","import React from 'react';\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport { connect } from 'react-redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport * as actions from '../store/actions/auth';\n\n\nconst { Header, Content, Footer } = Layout;\n\n\nclass CustomLayout extends React.Component {\n  render () {\n    return (\n\n      <Layout className=\"layout\">\n      <Header>\n        <div className=\"logo\"\n        style={{ width: '120px', height: '31px', background: 'rgba(255, 255, 255, 0.2)', margin: '16px 24px 16px 0', float: 'left' }}/>\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']} style={{ float:'left' }}>\n         {\n            // if authenticated = true we show logout \n            this.props.isAuthenticated ? \n\n             <Menu.Item key=\"1\" onClick={this.props.logout}>\n              Logout\n            </Menu.Item>\n\n            :\n\n            // else not authenticated \n\n            <Menu.Item key=\"1\">\n              <Link to=\"/login/\">Login</Link>\n            </Menu.Item>\n         }\n\n          <Menu.Item key=\"2\"><Link to=\"/\">List</Link></Menu.Item>\n          <Menu.Item key=\"3\"><Link to=\"/\">Generator</Link></Menu.Item>\n        </Menu>\n      </Header>\n      <Content style={{ padding: '0 50px' }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          {/* link is like an anchor tag, takes you to defined location'*/}\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item><Link>List</Link></Breadcrumb.Item>\n          <Breadcrumb.Item><Link>App</Link></Breadcrumb.Item>\n        </Breadcrumb>\n          <div className=\"site-layout-content\"\n          style={{ background: '#fff', padding: '24px', minHeight: '280px' }}>\n            {/* class based takes this. */}\n            {this.props.children}\n          </div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n    </Layout>\n    );\n  }\n}\n\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    logout: () => dispatch(actions.logout())\n  }\n}\n\nexport default withRouter(connect(null, mapDispatchToProps)(CustomLayout));\n\n  ","import React, { Component } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\n// grabs the store we created and allow us to access states \nimport { connect } from 'react-redux';\nimport BaseRouter from './routes';\nimport 'antd/dist/antd.css'; \nimport * as actions from './store/actions/auth';\n\nimport CustomLayout from './containers/Layout';\n\n\nclass App extends Component {\n\n\t// calls dispatch below whenever rendered \n\tcomponentDidMount() {\n\t\tthis.props.onTryAutoSignup(); \n\t}\n\n\trender() {\n\t\treturn (\n\t\t    <div>\n\t\t    <Router> \n\t\t\t\t{/* passes isAuthenticated down to CustomLayout component */}\n\t\t\t    <CustomLayout {...this.props}>\n\t\t\t    \t<BaseRouter />\n\t\t\t    </CustomLayout>\n\t\t\t</Router>\n\t\t    </div>\n\t\t  );\n\t}\n}\n// everytime app rendered, checks if authenticated automatically \n// maps states to props, input as state \nconst mapStateToProps = state => {\n\treturn {\n\t\t// whether or not token = null (isAuthenticated = False)\n\t\tisAuthenticated: state.token != null\n\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\t// anonymous function call \n\t\tonTryAutoSignup: () => dispatch(actions.authCheckState())\n\t}\n}\n\n// allows us to gain access to property \nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// update object properties\n\nexport const updateObject = (oldObject, updatedProperties) => {\n\treturn {\n\t\t// creates clone of old objects\n\t\t...oldObject, \n\t\t// takes object and replaces it, updates with these new keys\n\t\t...updatedProperties\n\t}\n}","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n\ttoken: null, \n\terror: null, \n\tloading: false\n}\n\n// reducers job takes in initial state + action \n// then returns update state \nconst authStart = (state, action) =>  {\n\t// returns object of this state and manipulate its value \n\treturn updateObject(state, {\n\t\terror: null, \n\t\tloading: true\n\t});\n}\n\n// coming from action should be the token \n// when we dispatch authSuccess, takes in token and returns the object\nconst authSuccess = (state, action) => {\n\treturn updateObject(state, {\n\t\ttoken: action.token, \n\t\terror: null, \n\t\t// now we've been authenticated \n\t\tloading: false\n\t})\n}\n\nconst authFail = (state, action) => {\n\treturn updateObject(state, {\n\t\t// update error state\n\t\terror: action.error,\n\t\tloading: false\n\t})\n}\n\n\nconst authLogout = (state, action) => {\n\treturn updateObject(state, {\n\t\t// we've logged out so no more token\n\t\ttoken: null, \n\t})\n}\n\n// define when these actually take place\n// define initial state above\nconst reducer = (state=initialState, action) => {\n\tswitch (action.type) {\n\t\t// what type of action it is\n\t\tcase actionTypes.AUTH_START : return authStart(state, action);\n\t\tcase actionTypes.AUTH_SUCCESS : return authSuccess(state, action);\n\t\tcase actionTypes.AUTH_FAIL : return authFail(state, action);\n\t\tcase actionTypes.AUTH_LOGOUT : return authLogout(state, action);\n\t\tdefault:\n\t\t\t// do not do anything to it and return \n\t\t\treturn state; \n\t}\n}\n\nexport default reducer; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport reducer from './store/reducers/auth';\n\n\n// checking if we have this extension installed, else uses redux compose \nconst composeEnhances = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(reducer, composeEnhances(\n\tapplyMiddleware(thunk)\n));\n\n// bring in provider \nconst app = (\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}