{"version":3,"sources":["components/Moves.js","components/Form.js","containers/MoveListView.js","containers/MoveDetailView.js","store/actions/auth.js","store/actions/actionTypes.js","containers/Login.js","containers/Signup.js","routes.js","containers/Layout.js","App.js","serviceWorker.js","store/utility.js","store/reducers/auth.js","index.js"],"names":["Moves","itemLayout","dataSource","this","props","data","renderItem","item","Item","Meta","title","href","id","name","description","React","Component","CustomForm","onFinish","values","requestType","moveID","action","moves","console","log","move","axios","defaults","headers","Authorization","token","post","then","res","catch","error","err","put","rules","required","label","placeholder","type","htmlType","btnText","connect","state","MoveList","newMoves","get","setState","newProps","handler","bind","MoveDetail","handleDelete","event","match","params","delete","history","push","onSubmit","authSuccess","authFail","logout","localStorage","removeItem","checkAuthTimeout","expirationTime","dispatch","setTimeout","Login","onAuth","username","password","onFinishFailed","errorInfo","errorMessage","message","loading","Password","style","marginLeft","to","key","expirationDate","Date","getTime","setItem","actions","Signup","email","confirm","scrollToFirstError","QuestionCircleOutlined","whitespace","hasFeedback","dependencies","getFieldValue","validator","rule","value","Promise","reject","resolve","password1","password2","BaseRouter","exact","path","component","Header","Layout","Content","Footer","CustomLayout","className","width","height","background","margin","float","theme","mode","defaultSelectedKeys","isAuthenticated","onClick","padding","minHeight","children","textAlign","withRouter","App","onTryAutoSignup","getItem","undefined","Boolean","window","location","hostname","updateObject","oldObject","updatedProperties","initialState","authStart","authLogout","reducer","composeEnhances","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","app","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b8bb8ab6.chunk.js","sourcesContent":["import React from 'react';\nimport { List } from 'antd';\n\n// be wary of ` verus '\nclass Moves extends React.Component {\n\n  render() {\n    return (\n    <List\n      itemLayout=\"horizontal\"\n      dataSource={this.props.data}\n      renderItem={item => (\n        <List.Item>\n          <List.Item.Meta\n            // goes to slash that link \n            title={<a href={`/moves/${item.id}/`}>{item.name}</a>}\n            description={item.id}\n          />\n        </List.Item>\n      )}\n    />\n    );\n  }\n}\n\nexport default Moves;","import React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { Form, Input, Button} from 'antd';\n\n\nclass CustomForm extends React.Component {\n\n\n  onFinish = (values, requestType, moveID, action, moves) => {\n    // so it doesn't submit and reload \n    console.log(values);\n    const move = values['move'];\n    const type = values['type'];\n\n    axios.defaults.headers = {\n        \"Content-Type\": \"application/json\",\n        Authorization: this.props.token\n    }\n\n    switch ( requestType ) {\n      case 'post':\n        return axios.post('/api/', {\n            name: move, \n        })\n        .then(\n          res => console.log(res), \n          action()\n          )\n        .catch(error => console.err(error));\n      case 'put':\n        return axios.put(`/api/${moveID}/`, {\n            name: move, \n        })\n        .then(res => console.log(res))\n        .catch(error => console.err(error));\n\n\n    }\n  };\n\n  render () {\n    return (\n      <div>\n      {/* when form is done and gets submitted, onFinish gets called, \n        passing in the values from the form */}\n        <Form onFinish={(values) => this.onFinish(values, this.props.requestType, this.props.moveID, this.props.action, this.props.moves)}>\n      {/* give form item a name */}\n          <Form.Item name=\"move\" rules={[{ required: true }]} label=\"Name of Move\">\n            <Input placeholder=\"Name your move\" />\n          </Form.Item>\n          <Form.Item name=\"type\" label=\"Type of Move\">\n            <Input placeholder=\"Choose your type of move\" />\n          </Form.Item>\n          <Form.Item>\n            <Button type=\"primary\" htmlType=\"submit\">{this.props.btnText}</Button>\n          </Form.Item>\n        </Form>\n      </div>\n      );\n  }\n}\n\nconst mapStateToProps = state => {\n  return {\n    // whether or not token = null (isAuthenticated = False)\n    token: state.token\n  }\n}\n\n\nexport default connect(mapStateToProps)(CustomForm);","import React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport Moves from '../components/Moves';\nimport CustomForm from '../components/Form';\n\n\nclass MoveList extends React.Component {\n\tstate = {\n\t\tmoves: [],\n\t}\n\n\n\thandler(newMoves) {\n\t\tconsole.log('updating page with new moves');\n\t\taxios.get('/api/')\n\t\t\t.then(res => {\n\t\t\t\tthis.setState({\n\t\t\t\t\tmoves: res.data, \n\t\t\t\t});\n\t\t\t\tconsole.log('printing data', res.data);\n\t\t\t}) \n\t}\n\t// when new props arrive, component rerenders\n\tcomponentWillReceiveProps(newProps) {\n\t\tconsole.log(newProps);\n\t\tif (newProps.token) {\n\t\t\taxios.defaults.headers = {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\tAuthorization: newProps.token\n\t\t\t}\n\t\t\taxios.get('/api/')\n\t\t\t\t.then(res => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tmoves: res.data, \n\t\t\t\t\t});\n\t\t\t\t\tconsole.log('printing data', res.data);\n\t\t\t\t}) \n\t\t}\n\n\t}\n\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Moves data={this.state.moves}/>\n\t\t\t\t<br />\n\t\t\t\t<h2>Create a Move</h2>\n\t\t\t\t<CustomForm \n\t\t\t\t\trequestType=\"post\"\n\t\t\t\t\tmoveID={null}\n\t\t\t\t\tbtnText=\"Create\" moves={this.state.moves} action={this.handler.bind(this)}/>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\t// whether or not token = null (isAuthenticated = False)\n\t\ttoken: state.token\n\t}\n}\n\nexport default connect(mapStateToProps)(MoveList);","import React from 'react';\nimport axios from 'axios';\nimport { connect } from 'react-redux';\nimport { Card, Button } from 'antd';\n\n\n\nclass MoveDetail extends React.Component {\n\n\tstate = {\n\t\tmove: {},\n\n\t}\n\n\tcomponentWillReceiveProps(newProps) {\n\t\tconsole.log(newProps);\n\t\t// get new token \n\t\tif (newProps.token) {\n\t\t\t// set Headers\n\t\t\taxios.defaults.headers = {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\tAuthorization: newProps.token\n\t\t\t}\n\t\t\tconst moveID = this.props.match.params.moveID;\n\t\t\tconsole.log('moveID', moveID)\n\t\t\t// create request \n\t\t\taxios.get(`/api/${moveID}/`)\n\t\t\t\t.then(res => {\n\t\t\t\t\tthis.setState({\n\t\t\t\t\t\tmove: res.data,\n\t\t\t\t\t\tmoveID: moveID\n\t\t\t\t\t});\n\t\t\t\t}) \n\t\t}\n\n\t}\n\n\thandleDelete = (event) => {\n\t\tif (this.props.token !== null) {\n\t\t\tconst moveID = this.props.match.params.moveID;\n\t\t\taxios.defaults.headers = {\n\t\t\t\t\"Content-Type\": \"application/json\",\n\t\t\t\tAuthorization: this.props.token\n\t\t\t}\n\t\t\tconsole.log('deleting move with ID: ', moveID);\n\t\t\taxios.delete(`/api/${moveID}/`)\n\t\t\tthis.props.history.push('/');\n\n\t\t}\n\t\telse {\n\t\t\t// show some message \n\t\t}\n\t\n\t// THIS DOESN'T ACTUALLY REFRESH THE PAGE \n\t}\n\n\n\n\trender() {\n\t\treturn (\n\t\t\t// since we need to return one div\n\t\t\t<div>\n\t\t\t<Card title={this.state.move.name}>\n\t\t\t\t<p>{this.state.move.id}</p>\n\t\t\t</Card>\n\t\t\t{/* not sure why we must use lower case form */}\n\t\t\t<form onSubmit={this.handleDelete}>\n\t\t\t\t<Button type=\"danger\" htmlType=\"submit\">Delete</Button>\n\t\t\t</form>\n\t\t\t</div>\n\t\t);\n\t}\n\n}\n\nconst mapStateToProps = state => {\n\treturn {\n\t\t// whether or not token = null (isAuthenticated = False)\n\t\ttoken: state.token\n\t}\n}\n\nexport default connect(mapStateToProps)(MoveDetail);","// define methods that take place on receiving actions\n// these are events and when they happen, they signal for when\n// you can do something else ... \nimport * as actionTypes from './actionTypes';\nimport axios from 'axios';\n\nexport const authStart = () => {\n\treturn {\n\t\t// must always contain a return type \n\t\t// message received when we execute authStart\n\t\ttype: actionTypes.AUTH_START\n\t}\n}\n\n// takes in a token\nexport const authSuccess= token => {\n\treturn {\n\t\n\t\ttype: actionTypes.AUTH_SUCCESS,\n\t\ttoken: token\n\t}\n}\n\n\nexport const authFail = error => {\n\treturn {\n\n\t\ttype: actionTypes.AUTH_FAIL,\n\t\terror: error\n\t}\n}\n\n// removes credentials from local storage to log user out\nexport const logout = () => {\n\t// just need to remove user credentials from browser \n\tlocalStorage.removeItem('token');\n\tlocalStorage.removeItem('expirationDate');\n\treturn {\n\t\ttype: actionTypes.AUTH_LOGOUT\n\t};\n}\n\n// setting timer for our logout to take place, defined as 1 hr\nexport const checkAuthTimeout = expirationTime => {\n\treturn dispatch => {\n\t\t// something that gets called when given time is over\n\t\t// logs out once expiration \n\t\tsetTimeout(() => {\n\t\t\tdispatch(logout());\n\t\t}, expirationTime * 1000) // secs --> milliseconds\n\t}\n}\n\n// what you need to login = username, password \n// takes in username, password, then posts to backend \nexport const authLogin = (username, password) => {\n\treturn dispatch => {\n\t\t// an alert that we can look at \n\t\tdispatch(authStart());\n\t\t// log the user in at this URL\n\t\taxios.post('http://127.0.0.1:8000/rest-auth/login/', {\n\t\t\t// the data that gets posted \n\t\t\tusername: username, \n\t\t\tpassword: password\n\t\t})\n\t\t// to handle response\n\t\t.then(res => {\n\t\t\t// we get a key back \n\t\t\tconst token = res.data.key;\n\t\t\tconst expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\t\t\t// these are packages in the browser already \n\t\t\t// can't just store it in the application, must store it in something that persists\n\t\t\tlocalStorage.setItem('token', token);\n\t\t\tlocalStorage.setItem('expirationDate', expirationDate);\n\t\t\t// successful login\n\t\t\tdispatch(authSuccess(token));\n\t\t\tdispatch(checkAuthTimeout(3600))\n\n\t\t})\n\t\t// if incorrect credentials, catch error \n\t\t.catch(err => {\n\t\t\tdispatch(authFail(err))\n\t\t})\n\t}\n}\n\n// parameters required by restframework, can be changed \n// pretty similar to login\nexport const authSignup = (username, email, password1, password2) => {\n\treturn dispatch => {\n\t\t// an alert that we can look at \n\t\tdispatch(authStart());\n\t\t// post to this URL \n\t\taxios.post('http://127.0.0.1:8000/rest-auth/registration/', {\n\t\t\t// the data that gets posted \n\t\t\tusername: username, \n\t\t\temail: email, \n\t\t\tpassword1: password1, \n\t\t\tpassword2: password2\n\t\t})\n\t\t// to handle response\n\t\t.then(res => {\n\t\t\t// we get a key back \n\t\t\tconst token = res.data.key;\n\t\t\tconst expirationDate = new Date(new Date().getTime() + 3600 * 1000);\n\t\t\t// these are packages in the browser already \n\t\t\t// can't just store it in the application, must store it in something that persists\n\t\t\tlocalStorage.setItem('token', token);\n\t\t\tlocalStorage.setItem('expirationDate', expirationDate);\n\t\t\t// successful login\n\t\t\tdispatch(authSuccess(token));\n\t\t\tdispatch(checkAuthTimeout(3600))\n\n\t\t})\n\t\t.catch(err => {\n\t\t\tdispatch(authFail(err))\n\t\t})\n\t}\n}\n\nexport const authCheckState = () => {\n\treturn dispatch => {\n\t\t// getting object, check if token is stored in local storage \n\t\tconst token = localStorage.getItem('token');\n\t\t// no such token \n\t\tif (token == undefined) {\n\t\t\tdispatch(logout());\n\t\t}\n\t\telse {\n\t\t\t// get current expiration date \n\t\t\tconst expirationDate = new Date(localStorage.getItem('expirationDate'));\n\t\t\t// check if current expiration date is past now date \n\t\t\tif ( expirationDate <= new Date()) {\n\t\t\t\t// already happened, therefore logout \n\t\t\t\tdispatch(logout());\n\t\t\t}\n\t\t\telse {\n\t\t\t\tdispatch(authSuccess(token));\n\t\t\t\tdispatch(checkAuthTimeout((expirationDate.getTime() - new Date().getTime()) / 1000));\n\t\t\t}\n\t\t}\n\t}\n}","// actions that can happen related to authentication\nexport const AUTH_START = 'AUTH_START';\nexport const AUTH_SUCCESS = 'AUTH_SUCCESS';\nexport const AUTH_FAIL = 'AUTH_FAIL';\nexport const AUTH_LOGOUT = 'AUTH_LOGOUT';\n","import React from 'react';\nimport { Form, Input, Button, Spin } from 'antd';\nimport { connect } from 'react-redux';\nimport { NavLink } from 'react-router-dom';\nimport * as actions from '../store/actions/auth';\n\n\nclass Login extends React.Component {\n  // don't need to call validate because onFinish only calls after validated\n  onFinish = (values) => {\n    console.log('Trying to login with:', values);\n    this.props.onAuth(values.username, values.password)\n    this.props.history.push('/');\n   \n  };\n\n  onFinishFailed = (errorInfo) => {\n    console.log('Failed:', errorInfo);\n  };\n\n  render () { \n  \tlet errorMessage = null; \n  \tif (this.props.error) {\n  \t\terrorMessage = (\n  \t\t\t<p>{this.props.error.message}</p>\n  \t\t);\n  \t}\n\t  return (\n\t  \t<div>\n\t  \t\t{ errorMessage }\n\t\t  \t{\n\t\t  \t\tthis.props.loading ? \n\n\t\t  \t\t<Spin />\n\n\t\t  \t\t:\n\n\t\t\t    <Form\n\t\t\t\n\t\t\t      onFinish={this.onFinish}\n\t\t\t      onFinishFailed={this.onFinishFailed}\n\t\t\t    >\n\t\t\t      <Form.Item\n\t\t\t        label=\"Username\"\n\t\t\t        name=\"username\"\n\t\t\t        rules={[{ required: true, message: 'Please input your username!' }]}\n\t\t\t      >\n\t\t\t        <Input />\n\t\t\t      </Form.Item>\n\n\t\t\t      <Form.Item\n\t\t\t        label=\"Password\"\n\t\t\t        name=\"password\"\n\t\t\t        rules={[{ required: true, message: 'Please input your password!' }]}\n\t\t\t      >\n\t\t\t        <Input.Password />\n\t\t\t      </Form.Item>\n\n\t\t\t      <Form.Item>\n\t\t\t        <Button type=\"primary\" htmlType=\"submit\">\n\t\t\t          Login \n\t\t\t        </Button>\n\t\t\t        <span style={{ marginLeft: '0.5em'}}> \n\t\t\t         OR \n\t\t\t        </span>\n\t\t\t        <NavLink style={{ marginLeft: '0.5em'}} to='/signup/'>\n\t\t\t        Sign Up\n\t\t\t        </NavLink>\n\t\t\t      </Form.Item>\n\t\t\t    </Form>\n\t\t\t}\n\t    </div>\n\t  );\n\t};\n}\n\n\nconst mapStateToProps = (state) => {\n\treturn {\n\t\tloading: state.loading, \n\t\terror: state.error\n\t}\n}\n\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\tonAuth: (username, password) => dispatch(actions.authLogin(username, password))\n \t}\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Login);\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport { Form, Input, Tooltip, Button } from 'antd';\nimport { QuestionCircleOutlined } from '@ant-design/icons';\nimport * as actions from '../store/actions/auth';\n\n\nclass Signup extends React.Component {\n  // [form] = Form.useForm();\n\n  onFinish = values => {\n    console.log('Received values of form: ', values);\n    this.props.onAuth(values.username, values.email, values.password, values.confirm)\n    this.props.history.push('/');\n  };\n\n  render () { \n  return (\n    <Form\n      // form={this.form}\n      name=\"register\"\n      onFinish={this.onFinish}\n      scrollToFirstError\n    >\n\n    <Form.Item\n        name=\"username\"\n        label={\n          <span>\n            Username&nbsp;\n            <Tooltip title=\"Choose a username.\">\n              <QuestionCircleOutlined />\n            </Tooltip>\n          </span>\n        }\n        rules={[{ required: true, message: 'Please input a username!', whitespace: true }]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"email\"\n        label=\"E-mail\"\n        rules={[\n          {\n            type: 'email',\n            message: 'The input is not valid E-mail!',\n          },\n          {\n            required: true,\n            message: 'Please input your E-mail!',\n          },\n        ]}\n      >\n        <Input />\n      </Form.Item>\n\n      <Form.Item\n        name=\"password\"\n        label=\"Password\"\n        rules={[\n          {\n            required: true,\n            message: 'Please input your password!',\n          },\n        ]}\n        hasFeedback\n      >\n        <Input.Password />\n      </Form.Item>\n\n      <Form.Item\n        name=\"confirm\"\n        label=\"Confirm Password\"\n        dependencies={['password']}\n        hasFeedback\n        rules={[\n          {\n            required: true,\n            message: 'Please confirm your password!',\n          },\n          ({ getFieldValue }) => ({\n            validator(rule, value) {\n              if (!value || getFieldValue('password') === value) {\n                return Promise.resolve();\n              }\n              return Promise.reject('The two passwords that you entered do not match!');\n            },\n          }),\n        ]}\n      >\n        <Input.Password />\n      </Form.Item>\n\n    \n      <Form.Item>\n        <Button type=\"primary\" htmlType=\"submit\">\n          Signup\n        </Button>\n      </Form.Item>\n    </Form>\n  );\n  }\n};\n\nconst mapStateToProps = (state) => {\n  return {\n    loading: state.loading, \n    error: state.error\n  }\n}\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    onAuth: (username, email, password1, password2) => dispatch(actions.authSignup(username, email, password1, password2))\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signup);\n","import React from 'react';\nimport { Route } from 'react-router-dom';\nimport MoveList from './containers/MoveListView';\nimport MoveDetail from './containers/MoveDetailView';\nimport Login from './containers/Login';\nimport Signup from './containers/Signup';\n\nconst BaseRouter = () => (\n\t<div>\n\t\t{/* for the path localhost/ displays MoveList */}\n\t\t<Route exact path='/' component={MoveList} />\n\t\t{/* : defines a parameter */}\n\t\t<Route exact path='/moves/:moveID/' component={MoveDetail} />\n\t\t<Route exact path='/login/' component={Login} />\n\t\t<Route exact path='/signup/' component={Signup} />\n\t</div>\n\n\t);\n\nexport default BaseRouter;","import React from 'react';\nimport { Layout, Menu, Breadcrumb } from 'antd';\nimport { connect } from 'react-redux';\nimport { Link, withRouter } from 'react-router-dom';\nimport * as actions from '../store/actions/auth';\n\n\nconst { Header, Content, Footer } = Layout;\n\n\nclass CustomLayout extends React.Component {\n  render () {\n    return (\n\n      <Layout className=\"layout\">\n      <Header>\n        <div className=\"logo\"\n        style={{ width: '120px', height: '31px', background: 'rgba(255, 255, 255, 0.2)', margin: '16px 24px 16px 0', float: 'left' }}/>\n        <Menu theme=\"dark\" mode=\"horizontal\" defaultSelectedKeys={['2']} style={{ float:'left' }}>\n         {\n            // if authenticated = true we show logout \n            this.props.isAuthenticated ? \n\n             <Menu.Item key=\"1\" onClick={this.props.logout}>\n              Logout\n            </Menu.Item>\n\n            :\n\n            // else not authenticated \n\n            <Menu.Item key=\"1\">\n              <Link to=\"/login/\">Login</Link>\n            </Menu.Item>\n         }\n\n          <Menu.Item key=\"2\"><Link to=\"/\">List</Link></Menu.Item>\n          <Menu.Item key=\"3\"><Link to=\"/\">Generator</Link></Menu.Item>\n        </Menu>\n      </Header>\n      <Content style={{ padding: '0 50px' }}>\n        <Breadcrumb style={{ margin: '16px 0' }}>\n          {/* link is like an anchor tag, takes you to defined location'*/}\n          <Breadcrumb.Item>Home</Breadcrumb.Item>\n          <Breadcrumb.Item><Link>List</Link></Breadcrumb.Item>\n          <Breadcrumb.Item><Link>App</Link></Breadcrumb.Item>\n        </Breadcrumb>\n          <div className=\"site-layout-content\"\n          style={{ background: '#fff', padding: '24px', minHeight: '280px' }}>\n            {/* class based takes this. */}\n            {this.props.children}\n          </div>\n      </Content>\n      <Footer style={{ textAlign: 'center' }}>Ant Design ©2018 Created by Ant UED</Footer>\n    </Layout>\n    );\n  }\n}\n\n\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    logout: () => dispatch(actions.logout())\n  }\n}\n\nexport default withRouter(connect(null, mapDispatchToProps)(CustomLayout));\n\n  ","import React, { Component } from 'react';\nimport { BrowserRouter as Router } from 'react-router-dom';\n// grabs the store we created and allow us to access states \nimport { connect } from 'react-redux';\nimport BaseRouter from './routes';\nimport 'antd/dist/antd.css'; \nimport * as actions from './store/actions/auth';\n\nimport CustomLayout from './containers/Layout';\n\n\nclass App extends Component {\n\n\t// calls dispatch below whenever rendered \n\tcomponentDidMount() {\n\t\tthis.props.onTryAutoSignup(); \n\t}\n\n\trender() {\n\t\treturn (\n\t\t    <div>\n\t\t    <Router> \n\t\t\t\t{/* passes isAuthenticated down to CustomLayout component */}\n\t\t\t    <CustomLayout {...this.props}>\n\t\t\t    \t<BaseRouter />\n\t\t\t    </CustomLayout>\n\t\t\t</Router>\n\t\t    </div>\n\t\t  );\n\t}\n}\n// everytime app rendered, checks if authenticated automatically \n// maps states to props, input as state \nconst mapStateToProps = state => {\n\treturn {\n\t\t// whether or not token = null (isAuthenticated = False)\n\t\tisAuthenticated: state.token != null\n\n\t}\n}\n\nconst mapDispatchToProps = dispatch => {\n\treturn {\n\t\t// anonymous function call \n\t\tonTryAutoSignup: () => dispatch(actions.authCheckState())\n\t}\n}\n\n// allows us to gain access to property \nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","// update object properties\n\nexport const updateObject = (oldObject, updatedProperties) => {\n\treturn {\n\t\t// creates clone of old objects\n\t\t...oldObject, \n\t\t// takes object and replaces it, updates with these new keys\n\t\t...updatedProperties\n\t}\n}","import * as actionTypes from '../actions/actionTypes';\nimport { updateObject } from '../utility';\n\nconst initialState = {\n\ttoken: null, \n\terror: null, \n\tloading: false\n}\n\n// reducers job takes in initial state + action \n// then returns update state \nconst authStart = (state, action) =>  {\n\t// returns object of this state and manipulate its value \n\treturn updateObject(state, {\n\t\terror: null, \n\t\tloading: true\n\t});\n}\n\n// coming from action should be the token \n// when we dispatch authSuccess, takes in token and returns the object\nconst authSuccess = (state, action) => {\n\treturn updateObject(state, {\n\t\ttoken: action.token, \n\t\terror: null, \n\t\t// now we've been authenticated \n\t\tloading: false\n\t})\n}\n\nconst authFail = (state, action) => {\n\treturn updateObject(state, {\n\t\t// update error state\n\t\terror: action.error,\n\t\tloading: false\n\t})\n}\n\n\nconst authLogout = (state, action) => {\n\treturn updateObject(state, {\n\t\t// we've logged out so no more token\n\t\ttoken: null, \n\t})\n}\n\n// define when these actually take place\n// define initial state above\nconst reducer = (state=initialState, action) => {\n\tswitch (action.type) {\n\t\t// what type of action it is\n\t\tcase actionTypes.AUTH_START : return authStart(state, action);\n\t\tcase actionTypes.AUTH_SUCCESS : return authSuccess(state, action);\n\t\tcase actionTypes.AUTH_FAIL : return authFail(state, action);\n\t\tcase actionTypes.AUTH_LOGOUT : return authLogout(state, action);\n\t\tdefault:\n\t\t\t// do not do anything to it and return \n\t\t\treturn state; \n\t}\n}\n\nexport default reducer; ","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, compose, applyMiddleware } from 'redux';\nimport { Provider } from 'react-redux';\nimport thunk from 'redux-thunk';\n\nimport reducer from './store/reducers/auth';\n\n\n// checking if we have this extension installed, else uses redux compose \nconst composeEnhances = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose\nconst store = createStore(reducer, composeEnhances(\n\tapplyMiddleware(thunk)\n));\n\n// bring in provider \nconst app = (\n\t<Provider store={store}>\n\t\t<App />\n\t</Provider>\n)\n\nReactDOM.render(app, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}